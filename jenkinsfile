pipeline {
    agent any

    environment {
        GIT_BRANCH = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
    }

    stages {
        stage('Build') {
            when {
                anyOf {
                    branch 'origin/dev'
                    branch 'origin/main'
                }
            }
            steps {
                script {
                    def dockerUsername = 'bharathsrinivasan'
                    def dockerPasswordCredential = 'dckr_pat_wT2df4Kw2z-5bLCvtcHYOcENHHo' // Update this with the correct Jenkins credential ID for Docker Hub ipassword

                    if (env.GIT_BRANCH == 'dev' || env.GIT_BRANCH == 'main') {
                        withCredentials([usernamePassword(credentialsId: dockerPasswordCredential, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh '''
                                chmod +x build.sh
                                ./build.sh
                            '''
                        }
                    } else {
                        echo 'Build is skipped for this branch.'
                    }
                }
            }
        }

        stage('Deploy') {
            when {
                anyOf {
                    branch 'origin/dev'
                    branch 'origin/main'
                }
            }
            steps {
                script {
                    def dockerUsername = 'bharathsrinivasan'
                    def dockerPasswordCredential = 'dckr_pat_wT2df4Kw2z-5bLCvtcHYOcENHHo' // Update this with the correct Jenkins credential ID for Docker Hub password

                    if (env.GIT_BRANCH == 'dev' || env.GIT_BRANCH == 'main') {
                        withCredentials([usernamePassword(credentialsId: dockerPasswordCredential, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh '''
                                chmod +x deploy.sh
                                ./deploy.sh
                            '''
                        }
                    } else {
                        echo 'Deployment is skipped for this branch.'
                    }
                }
            }
        }
    }
}

